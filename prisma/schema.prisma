// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // User's own sessions
  ownedSessions    EditorSession[] @relation("SessionOwner")
  // User's collaborations
  collaborations   Collaboration[]
  // User's GitHub integration
  githubUsername   String?
  githubToken      String?
  githubRepos      GitHubRepo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EditorSession {
  id          String   @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  language    String   @default("javascript")
  content     String   @default("")
  settings    Json?    // Editor settings, theme, etc.
  
  // Relationships
  ownerId     String
  owner       User     @relation("SessionOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  collaborators Collaboration[]
  files       File[]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastActive  DateTime @default(now())
  
  // GitHub integration
  githubRepo  String?
  githubBranch String?
  githubPath  String?
  
  @@index([ownerId])
  @@index([isPublic])
}

model Collaboration {
  id        String   @id @default(cuid())
  sessionId String
  userId    String
  role      UserRole @default(VIEWER)
  
  // Relationships
  session   EditorSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([sessionId, userId])
  @@index([sessionId])
  @@index([userId])
}

model File {
  id          String   @id @default(cuid())
  name        String
  path        String
  content     String   @default("")
  language    String   @default("javascript")
  size        Int      @default(0)
  
  // Relationships
  sessionId   String
  session     EditorSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([sessionId])
  @@index([path])
}

model GitHubRepo {
  id          String   @id @default(cuid())
  name        String
  fullName    String
  description String?
  private     Boolean  @default(false)
  htmlUrl     String
  cloneUrl    String
  
  // Relationships
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, fullName])
  @@index([userId])
}

enum UserRole {
  OWNER
  EDITOR
  VIEWER
} 